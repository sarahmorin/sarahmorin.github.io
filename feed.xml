<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sarahmorin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sarahmorin.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-21T19:12:19+00:00</updated><id>https://sarahmorin.github.io/feed.xml</id><title type="html">blank</title><subtitle>Software Engineer and CS Researcher </subtitle><entry><title type="html">Design Documentation</title><link href="https://sarahmorin.github.io/blog/2024/design-docs/" rel="alternate" type="text/html" title="Design Documentation"/><published>2024-12-18T00:00:00+00:00</published><updated>2024-12-18T00:00:00+00:00</updated><id>https://sarahmorin.github.io/blog/2024/design-docs</id><content type="html" xml:base="https://sarahmorin.github.io/blog/2024/design-docs/"><![CDATA[<p>Most developers hate writing design documents. Why? The instructions sound simple: just take the design you have in mind and write it down. Unfortunately, writing <em>good</em> documents proves rather difficult. More often than not, we end up with bad (and I mean terrible) documents that are difficult to read, impossible to maintain, and ultimately useless.</p> <blockquote> <p>Faced with the overwhelming pile of unintelligible design documents, how could one not become soured to the idea of writing them?</p> </blockquote> <p>Luckily, writing good design documents is possible. We simply need to learn how.</p> <h1 id="purpose">Purpose</h1> <p>When thinking about good vs. bad documentation, it’s important to remember why we write these documents.</p> <ul> <li><strong>Record of ideas</strong> – Write the design. I promise, once you start the project (especially if it’s complex or long-term), you will forget something. Write it down. Your future self will thank you.</li> <li><strong>Identify problems early</strong> – Working through the details of the design on paper makes it easier to spot mistakes and bugs. It’s better to find them before you write thousands of lines of code.</li> <li><strong>Team consensus</strong> – A written document is a good way to make sure everyone agrees before development begins. Assuming everyone is on the same page won’t cut it (and we all know what they say about assuming).</li> <li><strong>External collaboration</strong> – Communicating your design with people outside your immediate team (managers, other feature teams, on-boarding team members, etc.) is markedly easier when you can simply share a document.</li> </ul> <p>There’s also my (somewhat) cynical take on writing good documentation: fewer annoying questions! If you have to answer the same question more than once, you might as well write it down and point people to a doc. It’s just makes life easier.</p> <h2 id="common-pitfalls">Common Pitfalls</h2> <p>While there are infinitely many versions of the “bad design doc”, a few varieties are particularly common because they are easy to write. Don’t fall into the trap!</p> <ul> <li><strong>Stream of Conciousness</strong> — The free-form word dump. Is this a reasonable first draft to get ideas from brain to page? Yes. Is it acceptable to share as a final version? No.</li> <li><strong>The Everything Page</strong> — Stuff everything (background, design, API specs, test plan, development schedule) into one page. Great, right? I mean…all the information is there. Wrong. These are hard to read and nearly impossible to maintain as the design evolves and you work on the project.</li> <li><strong>Depth-First Design</strong> — Details first, context later! This is the document I find most often. You’ve been working on a problem for a while and dive into the details of your design almost immediately. Unfortunately, you’ve forgotten most of your audience isn’t working on this project and needs a lot of context before they can understand any of what you just said.</li> </ul> <h1 id="anatomy-of-good-design-documents">Anatomy of Good Design Documents</h1> <p>How do we write good design documents? Structure.</p> <blockquote> <p>Separate the design from its development.</p> </blockquote> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/design_docs.svg-480.webp 480w,/assets/img/design_docs.svg-800.webp 800w,/assets/img/design_docs.svg-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/design_docs.svg" class="img-fluid rounded z-depth-0" width="100%" height="auto" title="Anatomy of Good Design Docs" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Although closely related, the design and the development plan are distinct pieces of information. Yes, we often make design choices based on time and effort of implementation (i.e. the schedule) and the design itself informs which developers work on each task; however, we need to focus on the reader’s perspective. Consider a senior engineer who needs to approve the design of a new feature. Do they really need to see the full-schedule or do they just want to read the design? Similarly, a manager might want to understand the task breakdown and schedule without getting into the weeds of technical details.</p> <p>Another major benefit to organizing information this way is ease of updates. Schedules change constantly and sifting through the full design to update the project schedule is a pain. Breaking the design into manageable pieces (rather than the ominous Everything Document) is better for both author and reader.</p> <h3 id="the-high-level-summary">The High Level Summary</h3> <p>The high level summary should gradually introduce readers to the project by giving context to the problem, highlighting goals, briefly describing the solution, and discussing potential concerns. Be careful not to dive into the details here (we don’t want a depth first design) and make sure to keep any design information very high-level. This document should be easily digestible for anyone unfamiliar with the project.</p> <details><summary>Example Structure</summary> <ol> <li>Problem Summary and Background</li> <li>Requirements, Goals, and Non-Goals</li> <li>Solution Summary</li> <li>Diagrams and Workflows</li> <li>Trade-offs, Performance, and Concerns</li> </ol> </details> <h3 id="component-details">Component Details</h3> <p>After the high-level summary, we can get into the meat of the design. The number of these types of pages varies from project to project, but a good rule of thumb is one detailed design page per component. It is reasonable to assume that the reader is familiar with the project or has at least read the high-level summary, so avoid redundancy. In addition to the detailed design, the doc might include more specific requirements, API specifications, performance impacts, potential future improvements, etc.</p> <details><summary>Example Structure</summary> <ol> <li>Component Summary (background if we are modifying an existing component)</li> <li>Specific Requirements</li> <li>Design Details</li> <li>API Specs</li> <li>Performance Impact Analysis</li> <li>Future work</li> </ol> </details> <h3 id="development-plan">Development Plan</h3> <p>Once we have the design, we can flesh out implementation logistics in the development plan docs. Most projects need two docs: the task breakdown/schedule and the test plan. I feel these are fairly intuitive documents, so my only advice is this: keep it simple. It is highly likely you will be updating these documents constantly, so make them easy to revise.</p> <h1 id="imparting-style">Imparting Style</h1> <p>Everything I’ve outlined so far is just a starting point. Every project is different and the design documents should reflect that. Ultimately, we just want the document to be both useful and easy to digest. Writing good documentation takes practice and patience, yes, but it shouldn’t be devoid of any creativity. As long as the docs are still effective, impart your own style, especially if that helps motivate you to write them.</p> <hr/> <h1 id="more-resources">More Resources</h1> <p>This post is inspired by a mini-lecture I presented to the GWU Senior Design class of 2024 while serving as one of their alumni mentors. See the full <a href="https://sarahmorin.github.io/assets/pdf/design_docs_pres.pdf">slides</a><d-footnote>If you would like a watermark free copy of these slides, reach out and let me know :)</d-footnote>.</p> <p><a href="https://rinaarts.com/how-to-write-an-effective-design-document/">How to write an effective design document - Rina Artstain</a></p> <p><a href="https://www.industrialempathy.com/posts/design-docs-at-google/">Design Docs at Google</a></p> <p><a href="https://github.com/oppia/oppia/wiki/Writing-design-docs">Writing Design Docs - Oppia</a></p>]]></content><author><name>Sarah Morin</name></author><category term="documentation"/><category term="software-engineering"/><summary type="html"><![CDATA[The software engineer's nemesis]]></summary></entry><entry><title type="html">I Quit My Job as a Software Engineer</title><link href="https://sarahmorin.github.io/blog/2024/i-quit/" rel="alternate" type="text/html" title="I Quit My Job as a Software Engineer"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://sarahmorin.github.io/blog/2024/i-quit</id><content type="html" xml:base="https://sarahmorin.github.io/blog/2024/i-quit/"><![CDATA[<p>In my third year as a software engineer, I decided I wanted to return to academia and pursue a PhD in CS; before I even started the admissions process, I resigned.</p> <p>Why? Why not wait until I had been accepted to leave my high-paying job with cushy benefits?</p> <p><strong>TL;DR I was miserable.</strong></p> <p>I’ve been drafting, scrapping, and re-writing this post for months; I always give up, afraid it will sound whiny or defensive. Now, I’m forcing myself to spit it out. But just to be clear, this post is not:</p> <ul> <li>a list of complaints about being a software engineer or working in tech,</li> <li>a self-soothing defense of my own choices, or</li> <li>a call to action for everyone to do what I did</li> </ul> <p>It’s simply an explanation of my path.</p> <p>Much like the proverbial frog in the pot, I failed to see what happened until my friends and family encouraged me to step back and look at my life. I love what I do…but I hated my job. As a software engineer, I spent 10-20% of my time designing solutions to difficult problems in a distributed file system. I loved that 10-20%, I really did. The rest of my time consisted of sitting in meetings, answering Slack messages, having the same discussions with the same people for the millionth week in a row, and letting my passion slowly wither away.</p> <p>The more I reflected on my work, the more I could see my environment for what it was: a confluence of mediocrity. Did I get to work on complex problems that I found interesting? Absolutely. Did I actually get to solve them? Not really. I wasn’t solving problems but developing a solution good enough to sell. Every time I started to sink my teeth into a problem, it was time to implement, deploy, and move on to the next project.</p> <p>I realized all of my frustrations for the past year boiled down to one point: almost everyone around me could accept doing mediocre work. Even when I pushed for us to do small things like improve documentation or use a consistent code format, no one wanted to help. I always heard the same excuses: “It’s not my job”, “This is what it’s like at other companies too”, and “It’s too much work”. Even if the effort would save everyone time, apathy always won out. I felt utterly alone.</p> <p>For a few months, I looked for a new job, thinking maybe it was just the culture at this company and I could fit in somewhere else, but eventually, I decided I didn’t want to be someone who hacks together something they can sell. I want to solve problems and continue learning.</p> <p>In retrospect, I’m ashamed of how long it took me to figure it all out. I always kept the PhD in the back of my mind. I even spent the bulk of my junior year of college deliberating grad school vs. industry. In the end, I chose industry. Even though I ended up leaving my job, I’m certain it was the right choice. I wasn’t prepared to start a PhD at 22, but I am now. I know that if I hadn’t spent those years as a software engineer, I always would have wondered if grad school was the right place for me or if I had only done it because that’s what’s expected when you’re a good student.</p> <p>I neither regret my time as a software engineer nor leaving my job when I did (even if it wasn’t the most pragmatic path.) I learned so much during that phase of my career, about my field and myself and I’m so thankful for that time. For perhaps the first time in my life, I’m confident in what I want to do. It may sound simplistic, but I love learning.</p>]]></content><author><name></name></author><category term="software-engineering"/><category term="phd"/><summary type="html"><![CDATA[In my third year as a software engineer, I decided I wanted to return to academia and pursue a PhD in CS; before I even started the admissions process, I resigned.]]></summary></entry></feed>